set nocompatible

" ------- PLUGINS ---------------------------------------
let g:ale_disable_lsp = 1
call plug#begin()
	" functionality
  Plug 'preservim/nerdtree'
  Plug 'vim-airline/vim-airline'
  Plug 'tomtom/tcomment_vim'
  Plug 'airblade/vim-gitgutter'
  Plug 'junegunn/fzf'
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
	Plug 'junegunn/goyo.vim'
  Plug 'tpope/vim-obsession'
	Plug 'dense-analysis/ale'
  Plug 'norcalli/nvim-colorizer.lua'
    
  "   " Haskell
  " Plug 'alx741/vim-hindent'
  " Plug 'ndmitchell/ghcid', { 'rtp': 'plugins/nvim' }
  " Plug 'rbgrouleff/bclose.vim'
  " Plug 'hasufell/ghcup.vim'
  " Plug 'parsonsmatt/intero-neovim'
	
  " colorschemes 
	Plug 'tomasiser/vim-code-dark'
	Plug 'sheerun/vim-polyglot'
	Plug 'lifepillar/vim-solarized8'
	Plug 'sainnhe/everforest'
  Plug 'NLKNguyen/papercolor-theme'
  Plug 'stefanvanburen/rams.vim'
  Plug 'morhetz/gruvbox'
	Plug 'sainnhe/sonokai'
	Plug 'joshdick/onedark.vim'
	Plug 'tomasiser/vim-code-dark'
	Plug 'doums/darcula'
	Plug 'CreaturePhil/vim-handmade-hero'
	Plug 'gosukiwi/vim-atom-dark'
  Plug 'koffeeboi/jjstyle'
  Plug 'fcpg/vim-fahrenheit'
  Plug 'fcpg/vim-orbital'
  Plug 'fcpg/vim-farout'
  Plug 'rakr/vim-two-firewatch'
  Plug 'whatyouhide/vim-gotham'
  Plug 'wojciechkepka/vim-github-dark'
call plug#end()

" nerdtree
let NERDTreeQuitOnOpen=0
let NERDTreeQuitOnOpen=0

" intero
let g:intero_backend = {
        \ 'command': 'ghci',
        \ 'cwd': expand('%:p:h'),
        \}

" colorizer
set termguicolors
lua require'colorizer'.setup()

" general 
let g:indent_guides_guide_size = 1
let g:indent_guides_color_change_percent = 3
let g:indent_guides_enable_on_vim_startup = 1

" ------ CONFIG ----------------------------------------- 
" directory
nnoremap mn :NERDTree<CR>
nnoremap mf :FZF<CR>

" building and saving
nnoremap mq :wqa<CR>
nnoremap mw :w<CR>
nnoremap ms :wa<CR>
nnoremap mt :!
nnoremap mm :w<CR>:!build<CR>
nnoremap mr :w<Cr>:!run<CR>
nnoremap me :w<CR>:!build && run<cr>
" coding
nnoremap md :ALEDetail<cr>
nnoremap mo :CocOutline<cr>

" windows
nnoremap mv :vertical resize 
nnoremap mh :resize

" customization
nnoremap mb :let &bg=(&bg=='light'?'dark':'light')<CR> :let g:airline_theme=(&bg=='light'?'base16_solarized_light':'base16_solarized_dark')<CR>
nnoremap mg :Goyo<CR>

" ------ CONFIG ----------------------------------------- 
set autoindent
set smartindent
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set cursorline
set number
set relativenumber
set nowrap
set mouse=v
set hlsearch
set showmatch

syntax on           
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" ------ HASKELL ---------------------------------------- 
let g:haskell_indent_if = 2
let g:haskell_indent_before_where = 2
let g:haskell_indent_case_alternative = 1
let g:haskell_indent_let_no_in = 0
let g:ale_linters = {}
let g:ale_linters.haskell = ['stack-ghc-mod', 'hlint']
let g:haskell_indent_if = 2
let g:haskell_indent_before_where = 2
let g:haskell_indent_case_alternative = 1
let g:haskell_indent_let_no_in = 0
let g:hindent_on_save = 0
function! HaskellFormat(which) abort
  if a:which ==# 'hindent' || a:which ==# 'both'
    :Hindent
  endif
  if a:which ==# 'stylish' || a:which ==# 'both'
    silent! exe 'undojoin'
    silent! exe 'keepjumps %!stylish-haskell'
  endif
endfunction

augroup haskellStylish
  au!
  au FileType haskell nnoremap <leader>hi :Hindent<CR>
  au FileType haskell nnoremap <leader>hs :call HaskellFormat('stylish')<CR>
  au FileType haskell nnoremap <leader>hf :call HaskellFormat('both')<CR>
augroup END

" ------ EXTRA ------------------------------------------
function! UpdateTodoKeywords(...)
    let newKeywords = join(a:000, " ")
    let synTodo = map(filter(split(execute("syntax list"), '\n') , { i,v -> match(v, '^\w*Todo\>') == 0}), {i,v -> substitute(v, ' .*$', '', '')})
    for synGrp in synTodo
        execute "syntax keyword " . synGrp . " contained " . newKeywords
    endfor
endfunction

augroup now
    autocmd!
    autocmd Syntax * call UpdateTodoKeywords("NOTE", "NOTES", "OPTTODO")
augroup END

" NOTE (Elias): Code to remember folds, still has bugs
" augroup remember_folds
"   autocmd!
"   au BufWinLeave ?* mkview 1
"   au BufWinEnter ?* silent! loadview 1
" augroup END

" ------ COLORSCHEME ------------------------------------

" let darkmode=system('darkmode get')
" let &bg=(darkmode=~0?'light':'dark')
" colorscheme solarized8
" let g:airline_theme=(&bg=='light'?'base16_solarized_light':'base16_solarized_dark')

colorscheme pablo
set nocursorline

